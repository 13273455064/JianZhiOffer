package com.liquor.jianzhioffer.no31to40;

/**
 * 求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？
 * 为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。
 * ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。
 *
 * 最简单的解法就是把所有的数字转字符串，然后每个字符串判断1的格式，时间复杂度O(n),
 *
 * 正确的思路应该是把n看做三个部分，分别为   当前位的数字cor，高位数字high，低位数字low，当前位分别为个十百千万
 * 然后分析当前位的数字，只有三种情况，要么cor==0，要么cor==1,要么cor>1
 * 当cor==0时：1的次数仅受高位影响，count = high*当前位数
 * 当cor==1时，不只是受高位的影响，还要受低位的影响，count =  (high * 当前位数) + Low + 1
 * 当cor>1时，只受高位的影响，count = (high +1) * 当前位数
 *
 * 设N = abcde ,其中abcde分别为十进制中各位上的数字。
 * 如果要计算百位上1出现的次数，它要受到3方面的影响：百位上的数字，百位以下（低位）的数字，百位以上（高位）的数字。
 * 1.如果百位上数字为0，百位上可能出现1的次数由更高位决定。比如：12013，则可以知道百位出现1的情况可能是：100199，11001199,21002199，，...，1110011199，一共1200个。
 * 可以看出是由更高位数字（12）决定，并且等于更高位数字（12）乘以 当前位数（100）。
 * 2.如果百位上数字为1，百位上可能出现1的次数不仅受更高位影响还受低位影响。比如：12113，则可以知道百位受高位影响出现的情况是：100199，11001199,21002199，，....，1110011199，
 * 一共1200个。和上面情况一样，并且等于更高位数字（12）乘以 当前位数（100）。但同时它还受低位影响，百位出现1的情况是：12100~12113,一共114个，等于低位数字（113）+1。
 * 3.如果百位上数字大于1（29），则百位上出现1的情况仅由更高位决定，比如12213，则百位出现1的情况是：100199,11001199，21002199，...，1110011199,1210012199,一共有1300个，
 * 并且等于更高位数字+1（12+1）乘以当前位数（100）。
 *
 *
 * @author zzc on 19.12.20
 */
public class No33 {

    public int NumberOf1Between1AndN_Solution(int n) {
            int count = 0;
            //从个位开始,i表示位数
            for (int i=1;i<=n;i*=10){
                //高位数字通过对当前位的高一位相除获得
                int high = n / (i * 10);
                //低位数字通过直接对当前位数取模获得
                int low = (n % i);
                //当前位数字相当于求高位的逆运算
                int cor = (n / i) % 10;

                if (cor==0){
                    count += high * i;
                }else if(cor==1){
                    count += high * i + (low +1);
                }else {
                    count += (high + 1) * i;
                }
            }
            return count;
    }
}
